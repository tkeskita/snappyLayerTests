#!/bin/bash
#
# Run OpenFOAM commands to generate mesh, log files and images

. $WM_PROJECT_DIR/bin/tools/RunFunctions
name="$1"
date_time_string="$2"

# Clean the case
./Allclean

# generate the mesh
echo "running blockMesh"
blockMesh > log.blockMesh
echo "running decomposePar"
decomposePar > /dev/null
echo "running Snappy"
mpirun -np 3 snappyHexMesh -parallel &> log.snappyHexMesh

echo "running reconstructParMesh for time 2"
reconstructParMesh -time 2 > /dev/null
echo "running reconstructPar for time 2"
reconstructPar -time 2 > /dev/null
echo "running checkMesh for time 2 (snapping)"
checkMesh -time 2 &> log.checkMesh_snapping

# Copy processor*/2 to processor*/3 if they are not existing already
# This is a workaround to continue even with cases without layers.
if [ ! -d "processor0/3" ]; then
  for f in `ls -1 | grep processor`; do
    cp -rv $f/2 $f/3 > /dev/null
  done
fi

echo "running reconstructParMesh for time 3"
reconstructParMesh -time 3 > /dev/null
echo "running reconstructPar for time 3"
reconstructPar -time 3 > /dev/null

# Resulting mesh contains unconnected mesh regions, keep only the largest one
echo "running splitMeshRegions -largestOnly for time 3"
splitMeshRegions -largestOnly &> log.splitMeshRegions
mv 4/largestOnly/* 4/
rmdir 4/largestOnly
echo "running checkMesh for time 4 (layers)"
checkMesh -time 4 &> log.checkMesh_layers

# save the mesh images
if [ ! "$name" == "optimizer" ]; then
  printf "Generating mesh images...\n"
  ~/temp/ParaView-5.9.1-MPI-Linux-Python3.8-64bit/bin/pvpython pvscript.py $name $date_time_string
fi

echo "Run simpleFoam solver test case"
cd solverCase
rm -rf 0 ?? ??? log.* processor* constant/polyMesh postProcessing > /dev/null
cp -rv 0.orig 0 > /dev/null
cp -rv ../4/polyMesh constant/ > /dev/null
echo "running potentialFoam"
potentialFoam &> log.potentialFoam
echo "running decomposePar"
decomposePar > /dev/null
echo "running simpleFoam"
mpirun -np 3 simpleFoam -parallel &> log.simpleFoam
